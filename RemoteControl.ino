#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//******************************************
//Инициализация кнопок
//******************************************
//Создаем LCD дисплей
#define OLED_RESET -1
Adafruit_SSD1306 display(OLED_RESET);

#if (SSD1306_LCDHEIGHT != 32)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

enum Pages {StartPage, BoardChargePage, ConnectionPage, DrivingPage, GpsPage};

Pages currentPage = StartPage;

const unsigned char PROGMEM battery25_32x16 [] = {
0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0, 0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60,
0x1B, 0x80, 0x00, 0x60, 0x1B, 0x80, 0x00, 0x70, 0x1B, 0x80, 0x00, 0x78, 0x1B, 0x80, 0x00, 0x7C,
0x1B, 0x80, 0x00, 0x7C, 0x1B, 0x80, 0x00, 0x78, 0x1B, 0x80, 0x00, 0x70, 0x1B, 0x80, 0x00, 0x60,
0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60, 0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0
};
const unsigned char PROGMEM battery50_32x16 [] = {
0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0, 0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60,
0x1B, 0x9C, 0x00, 0x60, 0x1B, 0x9C, 0x00, 0x70, 0x1B, 0x9C, 0x00, 0x78, 0x1B, 0x9C, 0x00, 0x7C,
0x1B, 0x9C, 0x00, 0x7C, 0x1B, 0x9C, 0x00, 0x78, 0x1B, 0x9C, 0x00, 0x70, 0x1B, 0x9C, 0x00, 0x60,
0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60, 0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0
};
const unsigned char PROGMEM battery75_32x16 [] = {
0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0, 0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60,
0x1B, 0x9C, 0xE0, 0x60, 0x1B, 0x9C, 0xE0, 0x70, 0x1B, 0x9C, 0xE0, 0x78, 0x1B, 0x9C, 0xE0, 0x7C,
0x1B, 0x9C, 0xE0, 0x7C, 0x1B, 0x9C, 0xE0, 0x78, 0x1B, 0x9C, 0xE0, 0x70, 0x1B, 0x9C, 0xE0, 0x60,
0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60, 0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0
};
const unsigned char PROGMEM battery100_32x16 [] = {
0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0, 0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60,
0x1B, 0x9C, 0xE7, 0x60, 0x1B, 0x9C, 0xE7, 0x70, 0x1B, 0x9C, 0xE7, 0x78, 0x1B, 0x9C, 0xE7, 0x7C,
0x1B, 0x9C, 0xE7, 0x7C, 0x1B, 0x9C, 0xE7, 0x78, 0x1B, 0x9C, 0xE7, 0x70, 0x1B, 0x9C, 0xE7, 0x60,
0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60, 0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0
};
const unsigned char PROGMEM batteryEmpty_32x16 [] = {
0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0, 0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60,
0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x70, 0x18, 0x00, 0x00, 0x78, 0x18, 0x00, 0x00, 0x7C,
0x18, 0x00, 0x00, 0x7C, 0x18, 0x00, 0x00, 0x78, 0x18, 0x00, 0x00, 0x70, 0x18, 0x00, 0x00, 0x60,
0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60, 0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0
};
const unsigned char PROGMEM connected_16x16 [] = {
0x00, 0x02, 0x00, 0x07, 0x01, 0xFE, 0x03, 0xFC, 0x07, 0x3C, 0x0C, 0x7C, 0x1C, 0x2C, 0x38, 0x0C,
0x30, 0x1C, 0x34, 0x38, 0x3E, 0x70, 0x3C, 0xE0, 0x3F, 0xC0, 0x7F, 0x80, 0xE0, 0x00, 0xC0, 0x00
};
const unsigned char PROGMEM disconnected_16x16 [] = {
0x00, 0x0F, 0x03, 0xF9, 0x06, 0x01, 0x0C, 0x03, 0x18, 0xC2, 0x31, 0x82, 0x63, 0x52, 0x46, 0x32,
0x4C, 0x62, 0x4A, 0xC6, 0x41, 0x8C, 0x43, 0x18, 0xC0, 0x30, 0x80, 0x60, 0x9F, 0xC0, 0xF0, 0x00
};
const unsigned char PROGMEM gpsConnected_16x16 [] = {
0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0xF8, 0x3C, 0x3C, 0x11, 0xCC, 0x73, 0xCE, 0x6B, 0xC6,
0x6D, 0x86, 0x6C, 0xE2, 0x69, 0xE2, 0x71, 0xEE, 0x11, 0xC8, 0x3C, 0x3C, 0x1F, 0xE0, 0x07, 0xE0
};
const unsigned char PROGMEM gpsConnecting_16x16 [] = {
0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x0F, 0xF0, 0x04, 0x20, 0x21, 0xC4, 0x73, 0xCE, 0x6B, 0xC6,
0x6D, 0x86, 0x6C, 0xE6, 0x69, 0xE6, 0x71, 0xEE, 0x21, 0xC4, 0x04, 0x20, 0x0F, 0xF0, 0x07, 0xE0
};
const unsigned char PROGMEM gpsDisconnected_16x16 [] = {
0x00, 0x00, 0x00, 0x00, 0x07, 0xCC, 0x1F, 0x9C, 0x3C, 0x38, 0x31, 0x70, 0x72, 0xE6, 0x69, 0xC6,
0x6B, 0x86, 0x67, 0x66, 0x4E, 0xE6, 0x1D, 0xEE, 0x39, 0xCC, 0x70, 0x3C, 0x67, 0xF0, 0x07, 0xE0
};

int currentSection = 1; //Номер текущей секции

//******************************************
//Инициализация кнопок
//******************************************
//Входы для кнопок
const int upButton = 6;
const int downButton = 5;
const int leftButton = 4;
const int rightButton = 3;
const int centerButton = 2;

enum Button{Up, Down, Left, Right, Center, None};
unsigned long buttonPressedTime = 0;

//******************************************
//Инициализация RF24L01
//******************************************
bool boardConnected = false;

//******************************************
//Типы данных
//******************************************
enum DrivingMode{Extrime, Normal, Safe};

enum GpsState {GpsConnected, GpsConnecting, GpsDisconnected};

typedef struct {
  int commonCharge;
  GpsState gpsState;
  bool gpsTracking;
  DrivingMode drivingMode;  
}
BoardData;

typedef struct {
  int acceleration;
  int braking;
  bool gpsConnect;
  bool gpsStartTracking;
  DrivingMode drivingMode;  
}
RemoteControlData;

//******************************************
//Объявление глобальных переменных
//******************************************
BoardData boardData{65, GpsConnected, false, Normal};
RemoteControlData remoteControlData{0, 0, false, false, Normal};
int remoteControlCharge = 100;

void setup() {
  Serial.begin(9600);

  //Инициализация дисплея
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.setRotation(3);
  display.clearDisplay();  
  
  display.setTextSize(1);
  display.setTextColor(WHITE);

  lcdDrawBase();  

  //Инициализация входов для кнопок
  pinMode(upButton, INPUT);
  pinMode(downButton, INPUT);
  pinMode(leftButton, INPUT);
  pinMode(rightButton, INPUT);
  pinMode(centerButton, INPUT);

}

void loop() {
  // put your main code here, to run repeatedly:  
  moveSelection(readButtonState());
}

void lcdDrawBase() {
  display.clearDisplay();
  display.drawRect(0, 0, 32 , 128, 1);
  display.display();

}

void lcdDrawPage(Pages page, int section) {
  display.clearDisplay();
  switch(page) {
    case StartPage:
      lcdDrawBasePage();
      lcdDrawSelection(section);
      break;
  }
  display.display();
  
}

void lcdDrawBasePage() {
  //Section 1
  display.setCursor(6,2);
  display.println(String(remoteControlCharge)+"%");
  if (boardConnected) {
    display.drawBitmap(8, 10, connected_16x16, 16, 16, 1);
  }
  else {
    display.drawBitmap(8, 10, disconnected_16x16, 16, 16, 1);
  }
  //Section 2
  if (boardData.commonCharge <= 10) {
    display.drawBitmap(0, 32, batteryEmpty_32x16, 32, 16, 1);
  }
  else if (boardData.commonCharge <= 25) {
    display.drawBitmap(0, 32, battery25_32x16, 32, 16, 1);
  }
  else if (boardData.commonCharge <= 50) {
    display.drawBitmap(0, 32, battery50_32x16, 32, 16, 1);
  }
  else if (boardData.commonCharge <= 75) {
    display.drawBitmap(0, 32, battery75_32x16, 32, 16, 1);
  }
  else {
    display.drawBitmap(0, 32, battery100_32x16, 32, 16, 1);
  }
  //Section 3
  display.setCursor(7,52);
  display.println("gps");
  switch(boardData.gpsState) {
    case GpsConnected:
      display.drawBitmap(1, 60, gpsConnected_16x16, 16, 16, 1);
      break;
    case GpsConnecting:
      display.drawBitmap(1, 60, gpsConnecting_16x16, 16, 16, 1);
      break;
    case GpsDisconnected:
      display.drawBitmap(1, 60, gpsDisconnected_16x16, 16, 16, 1);
      break;
  }
  //Section 4
  display.setCursor(2,80);
  display.fillRect(0, 78, 32 , 25, 1);
  float boardSpeed = 55.5;
  display.setTextColor(BLACK);
  display.println(String(boardSpeed)+"\nnorm"+"\nextrim");
  display.setTextColor(WHITE);
}

void moveSelection(Button but) {
  switch(but) {
    case Up:
      currentSection++;
      break;
    case Down:
      currentSection--;
      break;
  }

  if (currentSection > 4) {
    currentSection = 1;
  }
  else if (currentSection < 1) {
    currentSection = 4;
  }

  lcdDrawPage(currentPage, currentSection);
}

void lcdDrawSelection(int sectionNumber) {
  switch(sectionNumber) {
    case 0:
      display.drawRect(0, 0, 32 , 28, 1);
      break;
    case 1:
      display.drawRect(0, 28, 32 , 25, 1);
      break;
    case 2:
      display.drawRect(0, 53, 32 , 25, 1);
      break;
    case 3:
      display.drawRect(0, 78, 32 , 25, 1);
      break;
    case 4:
      display.drawRect(0, 103, 32 , 25, 1);
      break;
  }
}

Button readButtonState() {
  unsigned long dif = millis() - buttonPressedTime;
  if (dif < 100) {
    return None;
  }
  if (digitalRead(upButton)) {
    buttonPressedTime = millis();
    return Up;
  }
//  else if (digitalRead(downButton)) {
//    buttonPressedTime = millis();
//    return Down;
//  }
//  else if (digitalRead(leftButton)) {
//    buttonPressedTime = millis();
//    return Left;
//  }
//  else if (digitalRead(rightButton)) {
//    buttonPressedTime = millis();
//    return Right;
//  }
//  else if (digitalRead(centerButton)) {
//    buttonPressedTime = millis();
//    return Center;
//  }
  else {
    return None;
  }
}
